# name: Frontend Docker Image CI

# on:
#   push:
#     branches:
#       - ci-test 
      
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Install Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '22.14.0'  # Node.js 버전 확인 필요!

#       - name: Install Dependencies
#         run: |
#           cd hanbangbo  
#           npm install

#       - name: Build React App
#         run: |
#           cd hanbangbo  
#           npm run build

#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#       - name: Build the Docker image
#         run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/hanbangbo-front:latest

#       - name: Push Docker image to Docker Hub
#         run: docker push ${{ secrets.DOCKER_USERNAME }}/hanbangbo-front:latest

#       - name: Trigger infra-deploy repository deployment
#         run: |
#           RESPONSE=$(curl -X POST -s -o /dev/null -w "%{http_code}" \
#                -H "Authorization: token ${{ secrets.INFRA_DEPLOY_KEY }}" \
#                -H "Accept: application/vnd.github.v3+json" \
#                https://api.github.com/repos/HanBangBo/infra-deploy/dispatches \
#                -d '{"event_type":"front"}')

#           if [ "$RESPONSE" -ne 204 ]; then
#             echo "❌ GitHub API 요청 실패! 응답 코드: $RESPONSE"
#             exit 1
#           else
#             echo "✅ GitHub API 요청 성공! 응답 코드: $RESPONSE"
#           fi

name: Frontend Docker Image CI

on:
  push:
    branches:
      - ci-test 
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.14.0'  # Node.js 버전 확인 필요!

      - name: Install Dependencies
        run: |
          cd hanbangbo  
          npm install

      - name: Build React App
        run: |
          cd hanbangbo  
          npm run build

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/hanbangbo-front:latest

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/hanbangbo-front:latest

  deploy:
    needs: build  # build 완료 후 실행
    runs-on: ubuntu-latest
    steps:
      - name: Connect to EC2 and deploy
        env:
          EC2_HOST: "3.37.189.41"  # EC2 인스턴스 IP
          EC2_USER: "ubuntu"
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$SSH_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem

          # EC2에 SSH로 접속하여 기존 컨테이너 중지 & 삭제
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            docker stop frontend || true
            docker rm frontend || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/hanbangbo-front:latest
            docker run -d -p 8080:8080 --name frontend ${{ secrets.DOCKER_USERNAME }}/hanbangbo-front:latest
          EOF
